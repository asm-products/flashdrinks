{
  "rules": {

    "auths": {
      "$uid": {
        ".write": "auth.uid==$uid"
      }
    },

    "users": {
      ".read": true,
      "$uid": {
        "name": {".write": "auth.uid == $uid"},
        "picture": {".write": "auth.uid == $uid"},
        "arn": {".write": "auth.uid == $uid"},
        "notifs": {".write": true},
        "provider": {".write": "auth.uid == $uid"},
        "friends": {
          "$fid": {
            ".write": "auth.uid == $uid || auth.uid == $fid"
          }
        }
      }
    },

    "bars": {
      // anon can view
      ".read": true,
      ".write": "auth != null",
      //"lastIn": {".write": "auth != null"},
      "count": {".validate": "auth != null"},
      "lastIn": {".validate": "auth != null"},
      "rsvps": {
        "$rid": {
          ".validate": "auth != null && auth.uid == $rid"
        }
      }
      //"$bid": {".validate": "newData.isString()"}
    },

    "chats": {
      "$cid": {
        // anon can view
        ".read": true,
        // bar we want to write a message to must be valid
        // TODO we also somehow need `|| root.child(chatId(user.id, friend.id)+'/'+$cid).exists()`
        //".validate": "root.child('bars/'+$cid).exists()",
        "$message_id": {
          // a new message can be created if it does not exist, but it cannot be modified or deleted
          // any member of a room can write a new message
          //".write": "root.child('members/'+$room_id+'/'+auth.uid).exists() && !data.exists() && newData.exists()",
          ".write": "auth.uid!=null && !data.exists() && newData.exists()",

          // the room attribute must be a valid key in room_names/ (the room must exist)
          // the object to write must have a name, text, and timestamp
          ".validate": "newData.hasChildren(['user', 'text', 'timestamp'])",
          // the message must be written by logged in user
          "user": {
            ".validate": "newData.val() === auth.uid"
          },
          // the message must be longer than 0 chars and less than 50
          "text": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 250" },
          // messages cannot be added in the past or the future
          // clients should use Firebase.ServerValue.TIMESTAMP to ensure
          // accurate timestamps
          "timestamp": { ".validate": "newData.val() <= now" },
          // no other fields can be included in a message
          "$other": { ".validate": false }
        }
      }
    }
  }
}